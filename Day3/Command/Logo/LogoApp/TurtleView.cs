using System;
using System.Collections.Generic;
using System.Text;
using System.Windows.Forms;
using LogoLib;
using System.Drawing;
using System.Drawing.Drawing2D;

namespace LogoApp
{
    class TurtleView : Control
    {
        private Turtle turtle;

        /// <summary>
        /// Represents the offset required to cause the turtle 0,0 location
        /// to be in the centre of the screen.
        /// </summary>
        private float offsetX;
        private float offsetY;

        private Bitmap page = null;

        public TurtleView()
        {
        }

        /// <summary>
        /// Bind the view to a turtle..
        /// </summary>
        public Turtle Turtle
        {
            get { return turtle; }
            set
            {
                if (turtle != null)
                {
                    turtle.TurtleMoved -= TurtleMoved;
                }
                turtle = value;

                if (turtle != null)
                {
                    turtle.TurtleMoved += TurtleMoved;

                    Invalidate();
                }
            }
        }

        /// <summary>
        /// Clears the page, the turtle will still be 
        /// in its current position.
        /// </summary>
        public void Clear()
        {
            CreatePage();
            Invalidate();
        }

        /// <summary>
        /// Handles the Turtle moved event generated by the turtle
        /// this results in drawing a line between previous position
        /// and current position.  Note this drawing happens to a bitmap
        /// not to the actual screen.  We then call invalidate to cause
        /// the bitmap to be copied onto the actual window
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void TurtleMoved(object sender, TurtleMovedEventArgs e)
        {
            PointF next = TurtleLocationToPoint(e.Current);
            PointF prev = TurtleLocationToPoint(e.Prev);

            using (Graphics gc = Graphics.FromImage(page))
            {
                using (Brush brush = new SolidBrush(Color.Black))
                {
                    gc.DrawLine(new Pen(brush), prev,next);
                }
            }

            Invalidate();
        }

        /// <summary>
        /// Draws the turtle onto the window, takes into account
        /// the current angle the turtle is pointint in.
        /// </summary>
        /// <param name="gc"></param>
        private void DrawTurtle(Graphics gc)
        {
            PointF turtlePoint;
            float angle;

            if ( DesignMode == true )
            {
                // Control being rendered inside IDE
                // simple draw the turtle in the middle.
                angle = 0;
                turtlePoint = TurtleLocationToPoint(new Location(0,0) );
            }
            else
            {
                angle = turtle.Angle;
                turtlePoint = TurtleLocationToPoint(turtle.Location);
            }

            using (Brush turtleBrush = new SolidBrush(Color.Red))
            {
                // Rotate the turtle co-ordinates to refelect
                // the angle it will draw in
                Matrix matrix = new Matrix();
                matrix.RotateAt(-angle, turtlePoint);

                gc.Transform = matrix;

                // Triangle to represent the turtle
                gc.FillPolygon(turtleBrush,
                    new Point[] { new Point((int)turtlePoint.X , (int)turtlePoint.Y+15) ,
                                      new Point((int)turtlePoint.X-10, (int)turtlePoint.Y-10 ),
                                      new Point((int)turtlePoint.X+10 , (int)turtlePoint.Y-10),
                                      new Point((int)turtlePoint.X , (int)turtlePoint.Y+10)
                                    });
            }
        }

        private void ComputeCenteredZeroAxis()
        {
            offsetX = this.ClientRectangle.Width / 2;
            offsetY = this.ClientRectangle.Height / 2;
        }

        /// <summary>
        /// Maps turtle co-ordinates to pixel co-ordinates
        /// </summary>
        /// <param name="location"></param>
        /// <returns></returns>
        private PointF TurtleLocationToPoint(Location location)
        {
            return new PointF(location.X + offsetX, location.Y + offsetY);
        }

        /// <summary>
        /// Called when the HWnd is created, and thus we are now ok to create
        /// the resources dependant on dimensions 
        /// </summary>
        /// <param name="e"></param>
        protected override void OnHandleCreated(EventArgs e)
        {
            ComputeCenteredZeroAxis();

            CreatePage();

            base.OnHandleCreated(e);
        }

        private void CreatePage()
        {
            page = new Bitmap(ClientRectangle.Width, ClientRectangle.Height);
            using (Graphics gc = Graphics.FromImage(page))
            {
                using (Brush brush = new SolidBrush(this.BackColor))
                {
                    gc.FillRectangle(brush, ClientRectangle);
                }
            }
        }

        protected override void OnPaint(PaintEventArgs e)
        {
            if (page != null)
            {
                using (Graphics gc = Graphics.FromHwnd(this.Handle))
                {
                    gc.DrawImage(page, new Point(0, 0));
                    DrawTurtle(gc);
                }
            }

            base.OnPaint(e);
        }
    }
}
